---
import Layout from '../../layouts/Layout.astro'
import ReleaseNoteItem from '../../components/ReleaseNoteItem.astro'
import { releaseNotes, releaseNotesTwilight } from '../../release-notes'
import Title from '../../components/Title.astro'
import Description from '../../components/Description.astro'
import Button from '../../components/Button.astro'
---

<Layout title="Release Notes - Zen Browser">
  <main
    class="flex h-full min-h-[1000px] flex-1 flex-col items-center justify-center py-4"
  >
    <div
      id="release-notes"
      class="py-42 flex min-h-screen flex-col justify-center px-10 lg:px-10 xl:px-10 2xl:w-3/5"
    >
      <Description class="mt-48 text-4xl font-bold">Release Notes</Description>
      <p class="text-base opacity-55">
        Stay up to date with the latest changes to Zen Browser! Since the <a
          class="zen-link"
          href="#1.0.0-a.1">first release</a
        > till <a
          class="zen-link"
          href={`/release-notes#${releaseNotes[0].version}`}
          >{releaseNotes[0].version}</a
        >, we've been working hard to make Zen Browser the best it can be.
        Thanks everyone for your feedback! ❤️
      </p>
      <div class="ml-auto flex w-fit items-center gap-4">
        <Button class="mt-8 flex" isPrimary href="/donate">
          Give us some support!
        </Button>
        <Button
          id="toggle-notes"
          class="mt-8 flex w-36"
          data-open="false"
          href="#"
        >
          Expand all
        </Button>
      </div>
      {
        releaseNotesTwilight.features.length ||
        releaseNotesTwilight.fixes.length ? (
          <ReleaseNoteItem {...releaseNotesTwilight} isTwilight />
        ) : null
      }
      {releaseNotes.map((notes: any) => <ReleaseNoteItem {...notes} />)}
    </div>
  </main>
</Layout>
<script>
  const button = document.getElementById('toggle-notes')
  const container = document.getElementById('release-notes')
  const toggleNotes = () => {
    if (!button || !container) return

    const accordionItems = container.getElementsByTagName('details')
    const isOpen = button.getAttribute('data-open') === 'true'

    Array.from(accordionItems).forEach((accordionItem) => {
      if (isOpen) {
        accordionItem.removeAttribute('open')
      } else {
        accordionItem.setAttribute('open', '')
      }
    })

    button.setAttribute('data-open', (!isOpen).toString())
    button.textContent = isOpen ? 'Expand all' : 'Collapse all'
  }
  button?.addEventListener('click', toggleNotes)
</script>
